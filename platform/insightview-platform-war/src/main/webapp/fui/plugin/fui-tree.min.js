!function() {
    function a(a, b) {
        var e = this.get(0)
          , g = e.id
          , h = new c(g);
        h.setOptions(a,this);
        h.add(b && "combotree" == b ? {
            id: 0,
            pid: -1,
            name: a.rootName,
            onBeforeSelect: a.onBeforeSelect
        } : {
            id: 0,
            pid: -1,
            name: a.rootName,
            url: a.onSelect,
            onBeforeSelect: a.onBeforeSelect
        });
        for (var i = a.data, j = 0; j < i.length; j++) {
            var k = i[j][a.idField]
              , l = i[j][a.titleField]
              , m = i[j][a.parentIdField];
            a.showNodeTitle && l != a.showNodeTitle && 0 == m && (m = null ),
            h.add({
                id: k,
                pid: m,
                name: l,
                url: a.onSelect,
                onBeforeSelect: a.onBeforeSelect
            })
        }
        f("#" + g).empty(),
        f("#" + g).append(h + ""),
        f.data(e, d, h)
    }
    function b(a) {
        a = a || {},
        this.id = a.id,
        this.pid = a.pid,
        this.name = a.name,
        this.url = a.url,
        this.title = a.title,
        this.target = a.target,
        this.icon = a.icon,
        this.onBeforeSelect = a.onBeforeSelect,
        this.iconOpen = a.iconOpen,
        this._io = a.open || !1,
        this._is = !1,
        this._ls = !1,
        this._hc = !1,
        this._ai = 0
    }
    function c(a) {
        var c = f.contextPath;
        this.config = {
            target: null ,
            folderLinks: !0,
            useSelection: !0,
            useCookies: !1,
            useLines: !0,
            useIcons: !0,
            useStatusText: !1,
            closeSameLevel: !1,
            inOrder: !1,
            check: !1
        },
        this.icon = {
            root: c + "/fui/themes/default/icons/dtree/base.png",
            folder: c + "/fui/themes/default/icons/dtree/folder.png",
            folderOpen: c + "/fui/themes/default/icons/dtree/folderopen.png",
            node: c + "/fui/themes/default/icons/dtree/page.png",
            empty: c + "/fui/themes/default/icons/dtree/empty.gif",
            line: c + "/fui/themes/default/icons/dtree/line.png",
            join: c + "/fui/themes/default/icons/dtree/join.png",
            joinBottom: c + "/fui/themes/default/icons/dtree/joinbottom.png",
            plus: c + "/fui/themes/default/icons/dtree/plus.png",
            plusBottom: c + "/fui/themes/default/icons/dtree/plusbottom.png",
            minus: c + "/fui/themes/default/icons/dtree/minus.png",
            minusBottom: c + "/fui/themes/default/icons/dtree/minusbottom.png",
            nlPlus: c + "/fui/themes/default/icons/dtree/nolines_plus.png",
            nlMinus: c + "/fui/themes/default/icons/dtree/nolines_minus.png"
        },
        this.cbCollection = new Object,
        this.obj = a,
        this.aNodes = [],
        this.aIndent = [],
        this.root = new b({
            id: -1
        }),
        this.selectedNode = null ,
        this.selectedFound = !1,
        this.completed = !1,
        f.fn.f_tree.dtree_container[this.obj] = this
    }
    var d = "dtree"
      , e = ""
      , g = {
        rootName: "请选取下面的节点",
        idField: "id",
        titleField: "title",
        parentIdField: "parentId",
        onBeforeSelect: function() {
            return !0
        }
    }
      , h = {
        open: function(a) {
            var b = this.get(0)
              , c = f.data(b, d);
            c.o(a)
        },
        close: function(a) {
            var b = this.get(0)
              , c = f.data(b, d);
            c.o(a)
        },
        openAll: function() {
            var a = this.get(0)
              , b = f.data(a, d);
            b.openAll()
        },
        closeAll: function() {
            var a = this.get(0)
              , b = f.data(a, d);
            b.closeAll()
        }
    };
    f.fn.f_tree = function(a, b, c) {
        if ("object" == typeof a)
            i.call(this, a, b);
        else if ("string" == typeof a) {
            var d = h[a];
            if (d)
                return d.call(this, c);
            throw new Error("dTree do not support this method:" + a)
        }
    }
    ;
    var i = function(b, c) {
        var d = f.extend(!0, {}, g, b || {})
          , h = this;
        b.url ? f.ajax_({
            url: b.url,
            type: "post",
            dataType: "json",
            async: !1,
            data: {
                trmnlBrandNm: "",
                qyType: b.param,
                t: Math.random()
            },
            error: function() {
                throw new Error("Error get data for dtree,url:" + b.uri)
            },
            success: function(b) {
                d.data = b,
                e = b,
                a.call(h, d, c)
            }
        }) : a.call(h, d, c)
    };
    var treeOptions = undefined;
    var divCtx = undefined;
    f.fn.f_tree.dtree_container = {},
    c.prototype.setOptions = function(o,c){
    	treeOptions = o;
    	if(c){
    		divCtx = c;
    	}
    },
    c.prototype.getOptions = function(){
    	return treeOptions;
    },
    c.prototype.reBuild = function(){
    	a.call(divCtx, treeOptions, "combotree");
    },
    c.prototype.search = function(a) {
        var b = this
          , c = "null";
        $(".nodeSel") && (c = $(".nodeSel").attr("id"));
        for (var d = 0, e = b.aNodes.length; e > d; d++) {
            var f = b.aNodes[d];
            if (-1 != f.name.indexOf(a)) {
                {
                    f.id
                }
                b.openTo(d, !0),
                $("#" + c).attr("class", "node");
                break
            }
        }
    }
    ,
    c.prototype.add = function(a) {
        this.aNodes[this.aNodes.length] = new b(a)
    }
    ,
    c.prototype.getNodeName = function(a) {
        var b = ""
          , c = this.aNodes.length;
        if (0 >= c)
            return b;
        for (var d = 0; c > d; d++)
            if (this.aNodes[d].id == a) {
                b = this.aNodes[d].name;
                break
            }
        return b
    }
    ,
    c.prototype.openAll = function() {
        this.oAll(!0)
    }
    ,
    c.prototype.closeAll = function() {
        this.oAll(!1)
    }
    ,
    c.prototype.toString = function() {
        var a = '<div class="dtree">\n';
        return document.getElementById ? (this.config.useCookies && (this.selectedNode = this.getSelected()),
        a += this.addNode(this.root)) : a += "Browser not supported.",
        a += "</div>",
        this.selectedFound || (this.selectedNode = null ),
        this.completed = !0,
        a
    }
    ,
    c.prototype.addNode = function(a) {
        var b = ""
          , c = 0;
        for (this.config.inOrder && (c = a._ai),
        c; c < this.aNodes.length; c++)
            if (this.aNodes[c].pid == a.id) {
                var d = this.aNodes[c];
                if (d._p = a,
                d._ai = c,
                this.setCS(d),
                !d.target && this.config.target && (d.target = this.config.target),
                d._hc && !d._io && this.config.useCookies && (d._io = this.isOpen(d.id)),
                !this.config.folderLinks && d._hc && (d.url = null ),
                this.config.useSelection && d.id == this.selectedNode && !this.selectedFound && (d._is = !0,
                this.selectedNode = c,
                this.selectedFound = !0),
                b += this.node(d, c),
                d._ls)
                    break
            }
        return b
    }
    ,
    c.prototype.getCheckedNodes = function() {
        for (var a = new Array, b = 0; b < this.aNodes.length; b++)
            1 == document.getElementById("c" + this.obj + this.aNodes[b].id).checked && (a[a.length] = this.aNodes[b].id);
        return a
    }
    ,
    c.prototype.co = function(a) {
        if (this.cbCollection[a])
            return this.cbCollection[a];
        for (var b = 0; b < this.aNodes.length; b++)
            if (this.aNodes[b].id == a) {
                this.cbCollection[a] = document.getElementById("c" + this.obj + b);
                break
            }
        return this.cbCollection[a]
    }
    ,
    c.prototype.cc = function(a, b) {
        var c, d = document.getElementById("c" + this.obj + a).checked, e = (this.aNodes[a],
        this.aNodes.length);
        for (c = 0; e > c; c++)
            this.aNodes[c].pid == a && (document.getElementById("c" + this.obj + this.aNodes[c].id).checked = d,
            this.cc(this.aNodes[c].id, a));
        if (1 == d) {
            var f, g = b;
            do
                for (f = !1,
                c = 0; e > c; c++)
                    if (this.aNodes[c].id == g) {
                        document.getElementById("c" + this.obj + g).checked = !0,
                        g = this.aNodes[c].pid,
                        f = !0;
                        break
                    }
            while (1 == f)
        }
        if (0 == d) {
            var g = b;
            do {
                for (j = 0; e > j; j++)
                    if (this.aNodes[j].pid == g && 1 == document.getElementById("c" + this.obj + this.aNodes[j].id).checked)
                        return;
                if (j == e)
                    for (k = 0; e > k; k++)
                        if (this.aNodes[k].id == g) {
                            document.getElementById("c" + this.obj + this.aNodes[k].id).checked = !1,
                            g = this.aNodes[k].pid;
                            break
                        }
            } while (-1 != g)
        }
    }
    ,
    c.prototype.setDefaultCheck = function(a) {
        if (null != a && "" != a)
            for (var b = a.split(","), c = 0; c < b.length; c++)
                for (var d = 0; d < this.aNodes.length; d++)
                    if (this.aNodes[d].id == b[c]) {
                        document.getElementById("c" + this.obj + this.aNodes[d].id).checked = !0,
                        this.cc(this.aNodes[d].id, this.aNodes[d].pid);
                        break
                    }
    }
    ,
    c.prototype.node = function(a, b) {
        var c = '<div class="dTreeNode">' + this.indent(a, b);
        return this.config.useIcons && (a.icon || (a.icon = this.root.id == a.pid ? this.icon.root : a._hc ? this.icon.folder : this.icon.node),
        a.iconOpen || (a.iconOpen = a._hc ? this.icon.folderOpen : this.icon.node),
        this.root.id == a.pid && (a.icon = this.icon.root,
        a.iconOpen = this.icon.root),
        c += '<img id="i' + this.obj + b + '" src="' + (a._io ? a.iconOpen : a.icon) + '" alt="" />'),
        1 == this.config.check && (c += '<input type="checkbox" id="c' + this.obj + a.id + '" onclick="javascript:f.fn.f_tree.dtree_container[\'' + this.obj + "'].cc(" + a.id + "," + a.pid + ')"/>'),
        a.url ? (c += '<a id="s' + this.obj + b + '" class="' + (this.config.useSelection && a._is ? "nodeSel" : "node") + '" href="javascript:void(0)"',
        a.name && (c += ' title="' + a.name + '"'),
        a.target && (c += ' target="' + a.target + '"'),
        this.config.useStatusText && (c += " onmouseover=\"window.status='" + a.name + "';return true;\" onmouseout=\"window.status='';return true;\" "),
        this.config.useSelection && (a._hc && this.config.folderLinks || !a._hc) && (c += " onclick=\"javascript: f.fn.f_tree.dtree_container['" + this.obj + "'].s(" + b + ');"'),
        c += ">") : this.config.folderLinks && a.url || !a._hc || a.pid == this.root.id || (c += "<a onclick=\"javascript: f.fn.f_tree.dtree_container['" + this.obj + "'].o(" + b + ');" class="node">'),
        c += a.name,
        (a.url || (!this.config.folderLinks || !a.url) && a._hc) && (c += "</a>"),
        c += "</div>",
        a._hc && (c += '<div id="d' + this.obj + b + '" class="clip" style="display:' + (this.root.id == a.pid || a._io ? "block" : "none") + ';">',
        c += this.addNode(a),
        c += "</div>"),
        this.aIndent.pop(),
        c
    }
    ,
    c.prototype.indent = function(a, b) {
        var c = "";
        if (this.root.id != a.pid) {
            for (var d = 0; d < this.aIndent.length; d++)
                c += '<img src="' + (1 == this.aIndent[d] && this.config.useLines ? this.icon.line : this.icon.empty) + '" alt="" />';
            this.aIndent.push(a._ls ? 0 : 1),
            a._hc ? (c += "<a onclick=\"javascript: f.fn.f_tree.dtree_container['" + this.obj + "'].o(" + b + ');"><img id="j' + this.obj + b + '" src="',
            c += this.config.useLines ? a._io ? a._ls && this.config.useLines ? this.icon.minusBottom : this.icon.minus : a._ls && this.config.useLines ? this.icon.plusBottom : this.icon.plus : a._io ? this.icon.nlMinus : this.icon.nlPlus,
            c += '" alt="" /></a>') : c += '<img src="' + (this.config.useLines ? a._ls ? this.icon.joinBottom : this.icon.join : this.icon.empty) + '" alt="" />'
        }
        return c
    }
    ,
    c.prototype.setCS = function(a) {
        for (var b, c = 0; c < this.aNodes.length; c++)
            this.aNodes[c].pid == a.id && (a._hc = !0),
            this.aNodes[c].pid == a.pid && (b = this.aNodes[c].id);
        b == a.id && (a._ls = !0)
    }
    ,
    c.prototype.getSelected = function() {
        var a = this.getCookie("cs" + this.obj);
        return a ? a : null
    }
    ,
    c.prototype.s = function(a) {
        var b = this.aNodes[a]
          , c = b._p
          , d = {
            id: b.id,
            title: b.name,
            parentId: b.pid,
            parentTitle: c.name,
            nodeData: e[a - 1]
        }
          , f = b.onBeforeSelect.call(this, d);
        f !== !1 && (b.url && b.url.call(this, d),
        this.config.useSelection && (!b._hc || this.config.folderLinks) && this.selectedNode != a && ((this.selectedNode || 0 == this.selectedNode) && (eOld = document.getElementById("s" + this.obj + this.selectedNode),
        eOld.className = "node"),
        eNew = document.getElementById("s" + this.obj + a),
        eNew.className = "nodeSel",
        this.selectedNode = a,
        this.config.useCookies && this.setCookie("cs" + this.obj, b.id)))
    }
    ,
    c.prototype.o = function(a) {
        var b = this.aNodes[a];
        this.nodeStatus(!b._io, a, b._ls),
        b._io = !b._io,
        this.config.closeSameLevel && this.closeLevel(b),
        this.config.useCookies && this.updateCookie()
    }
    ,
    c.prototype.oAll = function(a) {
        for (var b = 0; b < this.aNodes.length; b++)
            this.aNodes[b]._hc && this.aNodes[b].pid != this.root.id && (this.nodeStatus(a, b, this.aNodes[b]._ls),
            this.aNodes[b]._io = a);
        this.config.useCookies && this.updateCookie()
    }
    ,
    c.prototype.openTo = function(a, b, c) {
        var d = this.aNodes[a];
        d.pid != this.root.id && d._p && (d._io = !0,
        d._is = b,
        this.completed && d._hc && this.nodeStatus(!0, d._ai, d._ls),
        this.completed && b ? this.s(a) : b && (this._sn = d._ai),
        this.openTo(d._p._ai, !1, !0))
    }
    ,
    c.prototype.closeLevel = function(a) {
        for (var b = 0; b < this.aNodes.length; b++)
            this.aNodes[b].pid == a.pid && this.aNodes[b].id != a.id && this.aNodes[b]._hc && (this.nodeStatus(!1, b, this.aNodes[b]._ls),
            this.aNodes[b]._io = !1,
            this.closeAllChildren(this.aNodes[b]))
    }
    ,
    c.prototype.closeAllChildren = function(a) {
        for (var b = 0; b < this.aNodes.length; b++)
            this.aNodes[b].pid == a.id && this.aNodes[b]._hc && (this.aNodes[b]._io && this.nodeStatus(!1, b, this.aNodes[b]._ls),
            this.aNodes[b]._io = !1,
            this.closeAllChildren(this.aNodes[b]))
    }
    ,
    c.prototype.nodeStatus = function(a, b, c) {
        eDiv = document.getElementById("d" + this.obj + b),
        eJoin = document.getElementById("j" + this.obj + b),
        this.config.useIcons && (eIcon = document.getElementById("i" + this.obj + b),
        eIcon.src = a ? this.aNodes[b].iconOpen : this.aNodes[b].icon),
        eJoin.src = this.config.useLines ? a ? c ? this.icon.minusBottom : this.icon.minus : c ? this.icon.plusBottom : this.icon.plus : a ? this.icon.nlMinus : this.icon.nlPlus,
        eDiv.style.display = a ? "block" : "none"
    }
    ,
    c.prototype.clearCookie = function() {
        var a = new Date
          , b = new Date(a.getTime() - 864e5);
        this.setCookie("co" + this.obj, "cookieValue", b),
        this.setCookie("cs" + this.obj, "cookieValue", b)
    }
    ,
    c.prototype.setCookie = function(a, b, c, d, e, f) {
        document.cookie = escape(a) + "=" + escape(b) + (c ? "; expires=" + c.toGMTString() : "") + (d ? "; path=" + d : "") + (e ? "; domain=" + e : "") + (f ? "; secure" : "")
    }
    ,
    c.prototype.getCookie = function(a) {
        var b = ""
          , c = document.cookie.indexOf(escape(a) + "=");
        if (-1 != c) {
            var d = c + (escape(a) + "=").length
              , e = document.cookie.indexOf(";", d);
            b = unescape(-1 != e ? document.cookie.substring(d, e) : document.cookie.substring(d))
        }
        return b
    }
    ,
    c.prototype.updateCookie = function() {
        for (var a = "", b = 0; b < this.aNodes.length; b++)
            this.aNodes[b]._io && this.aNodes[b].pid != this.root.id && (a && (a += "."),
            a += this.aNodes[b].id);
        this.setCookie("co" + this.obj, a)
    }
    ,
    c.prototype.isOpen = function(a) {
        for (var b = this.getCookie("co" + this.obj).split("."), c = 0; c < b.length; c++)
            if (b[c] == a)
                return !0;
        return !1
    }
    ,
    Array.prototype.push || (Array.prototype.push = function() {
        for (var a = 0; a < arguments.length; a++)
            this[this.length] = arguments[a];
        return this.length
    }
    ),
    Array.prototype.pop || (Array.prototype.pop = function() {
        return lastElement = this[this.length - 1],
        this.length = Math.max(this.length - 1, 0),
        lastElement
    }
    )
}(),
function() {
    f.fn.f_stree = function(c, d) {
        "object" == typeof c ? a.call(this, c) : "string" == typeof c && b.call(this, c, d)
    }
    ;
    var a = function(a) {
        f(this).empty();
        var b = this.get(0).id
          , c = b + "_container_fui"
          , d = b + "_searchBtn_fui"
          , e = b + "_searchInput_fui"
          , g = b + "_searchBtnExpand_fui"
          , h = b + "_searchBtnClose_fui"
          , i = null ;
        f(this).append("<input id='" + g + "' type='button' class='iconopen' value='展开 '/>"),
        f(this).append("<input id='" + h + "' type='button' class='iconclose' value='收起 '/>"),
        f(this).append("<input type='text' id='" + e + "'/><input id='" + d + "' type='button' class='iconbtn' value='.'/>");
        var j = f('<div id="' + c + '"/>');
        f(this).append(j),
        f(j).f_tree(a),
        i = f.data(j, "dtree"),
        f("#" + d).click(function() {
            var a = f("#" + e).val();
            f.data(j.get(0), "dtree").search(a)
        }),
        f("#" + g).click(function() {
            f.data(j.get(0), "dtree").openAll()
        }),
        f("#" + h).click(function() {
            f.data(j.get(0), "dtree").closeAll()
        })
    }
      , b = function(a, b) {
        var c = this.get(0)
          , d = c.id
          , e = d + "_container_fui";
        f("#" + e).f_tree(a, b)
    }
}(),
function() {
    var a = "dtree";
    f.fn.f_combotree = function(a, d) {
        if ("object" == typeof a)
            for (var e = 0; e < this.length; e++) {
                var g = this.get(e).id
                  , h = f("#" + g);
                c.call(h, a)
            }
        else if ("string" == typeof a) {
            var i = b[a];
            return i.call(this, d)
        }
    }
    ;
    var b = {
        clearValue: function() {
            this.val(""),
            this.next().val("")
        },
        setValue: function(a) {
            this.next().val(a)
        },
        getValue: function() {
            return this.next().val()
        }
    }
      , c = function(b) {
        var c = ""
          , d = "combotree"
          , e = this.get(0).id
          , g = this
          , h = e + "_combtree_fui"
          , i = e + "_container_fui"
          , j = null
          , k = parseInt(f(this).css("width").replace(/[^0-9]+/gi, "")) + parseInt(f(this).css("padding-right").replace(/[^0-9]+/gi, "")) + parseInt(f(this).css("padding-left").replace(/[^0-9]+/gi, ""))
          , l = f(this).attr("id") + "_hidden"
          , m = f(this).attr("name")
          , n = f("<input type='hidden' value='' id='" + l + "' name ='" + m + "' />")
          , o = f("<div id='" + h + "' style='display:none;width:" + k + "px;height:" + b.height + "px;' class='combotree'/>")
          , p = f("<div id='" + i + "'/>")
          , q = f("<input type='button' value='清除' id='cleanbutton' style='width:42px;height: 24px;float: right;'/>")
          , r = f("<div style='width:" + k + "px; ' class='parent_input_div'/>");
        f(this).removeAttr("name"),
        f("#" + h).empty(),
        f(this).wrap(r),
        f(n).insertAfter(this),
        f(o).insertAfter(n),
        f("#" + h).append(p),
        q.insertAfter(p);
        var s = b.onSelect;
        b.onSelect = function(a) {
            f(g).val(a.title),
            f("#" + l).val(a.id),
            o.hide(),
            "function" == typeof s && s.call(g, a)
        }
        ,
        f(p).f_tree(b, d);
        var t = b.onClear;
        f(q).click(function() {
            f(g).val(""),
            f(n).val(""),
            o.hide(),
            "function" == typeof t && t.call(g)
        }),
        j = f.data(p, "dtree"),
        f(this).click(function(a) {
            a = a || window.event,
            a.stopPropagation ? (a.preventDefault(),
            a.stopPropagation()) : (a.returnValue = !1,
            a.cancelBubble = !0),
            f("#" + h).css("display", "block")
        }),
        f("#" + h).click(function(a) {
            a = a || window.event,
            a.stopPropagation ? (a.preventDefault(),
            a.stopPropagation()) : (a.returnValue = !1,
            a.cancelBubble = !0)
        }),
        f(document).click(function() {
            o.hide()
        });
        var u = p.get(0)
          , v = f.data(u, a)
          , w = v.aNodes;
        c = f(g).val(),
        f("#" + l).val(c);
        for (var x = 0, y = w.length; y > x; x++) {
            if (w[x].id == c && "" != c) {
                f(g).val(w[x].name);
                break
            }
            f(g).val("")
        }
    }
}();
