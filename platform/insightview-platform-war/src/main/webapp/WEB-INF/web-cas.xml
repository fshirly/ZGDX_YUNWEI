<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:web="http://java.sun.com/xml/ns/javaee" xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	
	  <filter> 
        <filter-name>encodingFilter</filter-name> 
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param> 
            <param-name>encoding</param-name> 
            <param-value>UTF-8</param-value> 
        </init-param> 
        <init-param>  
	         <param-name>forceEncoding</param-name>  
	         <param-value>true</param-value>  
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
	<!-- update liujinb start -->
	<!-- 该过滤器用于实现单点登出功能，可选配置。 -->
	<filter>
	    <filter-name>CAS Single Sign Out Filter</filter-name>
	    <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	    <async-supported>true</async-supported>
	</filter>
	<filter-mapping>
	    <filter-name>CAS Single Sign Out Filter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
    
    
    <!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置。-->
    <listener>
       <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
    </listener>
    
    <!-- update liujinb end -->
    	
	<!-- Define the pushlet servlet -->
	<servlet>
		<servlet-name>pushlet</servlet-name>
		<servlet-class>nl.justobjects.pushlet.servlet.Pushlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>


	<!-- Define the Servlet Mappings. --> 
	<!-- The pushlet -->
	<servlet-mapping>
		<servlet-name>pushlet</servlet-name>
		<url-pattern>/pushlet.srv</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>       
		<servlet-name>default</servlet-name>      
		<url-pattern>*.jpg</url-pattern>     
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>  
		<url-pattern>*.jpeg</url-pattern>     
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>default</servlet-name>  
		<url-pattern>*.gif</url-pattern>  
	</servlet-mapping> 

	<servlet-mapping>       
		<servlet-name>default</servlet-name>      
		<url-pattern>*.png</url-pattern>     
	</servlet-mapping>  
	
	<servlet-mapping>  
		<servlet-name>default</servlet-name>  
		<url-pattern>*.ico</url-pattern>  
	</servlet-mapping> 

	<servlet-mapping>           
		<servlet-name>default</servlet-name>        
		<url-pattern>*.js</url-pattern>    
	</servlet-mapping>    
	
	<servlet-mapping>            
		<servlet-name>default</servlet-name>           
		<url-pattern>*.css</url-pattern>      
	</servlet-mapping>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		classpath*:applicationContext*.xml,
		
		<!-- update liujinb start -->
		classpath*:insightview-cas.xml,
		classpath*:insightview-jms.xml
		<!-- update liujinb end -->
		
		</param-value>
	</context-param>
	
	<listener>
        <listener-class>org.apache.logging.log4j.core.web.Log4jServletContextListener</listener-class>
    </listener>
    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.core.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
  
    
    <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- <listener>
		<listener-class>flex.messaging.HttpFlexSession</listener-class>
	</listener> -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<listener>
	    <listener-class>org.atmosphere.cpr.SessionSupport</listener-class>
	</listener>
	
	<welcome-file-list>
		<welcome-file>404.jsp</welcome-file>
	</welcome-file-list>
	<error-page>
		<error-code>404</error-code>
		<location>/404.jsp</location>
	</error-page>

	<error-page>
		<error-code>500</error-code>
		<location>/404.jsp</location>
	</error-page>

	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.atmosphere.cpr.MeteorServlet</servlet-class>
		<init-param>
			<param-name>org.atmosphere.servlet</param-name>
			<param-value>org.springframework.web.servlet.DispatcherServlet</param-value>
		</init-param>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springMVC-servlet.xml,classpath:insightview-workflow.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- Spring 刷新Introspector防止内存泄露 -->  
    <listener>  
        <listener-class>  
            org.springframework.web.util.IntrospectorCleanupListener  
        </listener-class>  
    </listener>  
      
    <!--  获取Spring Security session的生命周期-->  
    <listener>  
        <listener-class>  
            org.springframework.security.web.session.HttpSessionEventPublisher   
        </listener-class>  
    </listener>  
	<session-config>
		<session-timeout>100</session-timeout>
	</session-config>
</web-app>